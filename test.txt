Принципы SOLID — это пять ключевых принципов объектно-ориентированного проектирования, 
которые помогают создавать понятный, гибкий и легко поддерживаемый код:

Single Responsibility Principle (Принцип единственной ответственности), Улучшение читаемости кода.
Open/Closed Principle (Принцип открытости/закрытости),  Снижение сложности.
Liskov Substitution Principle (Принцип подстановки Барбары Лисков),  Повышение гибкости и расширяемости.
Interface Segregation Principle (Принцип разделения интерфейса) Уменьшение риска ошибок.
Dependency Inversion Principle (Принцип инверсии зависимостей).  Облегчение тестирования и поддержки.

YAGNI (You Ain't Gonna Need It) означает, что не следует добавлять в код функциональность, 
которая не требуется сейчас, но может пригодиться в будущем, чтобы избежать избыточности и 
ненужной сложности. 
DRY (Don't Repeat Yourself) гласит, что нельзя повторять один и тот же код в разных местах 
KISS (Keep It Simple, Stupid) подразумевает создание максимально простого и понятного кода, 
избегая излишнего усложнения там, где это не нужно

В JavaScript контекст — это окружение, в котором выполняется код, и оно определяет, 
на какой объект будет ссылаться ключевое слово this внутри функции. 
Значение this зависит от способа вызова функции и может указывать на объект, который "владеет" 
исполняемым кодом, глобальный объект, undefined или другой объект. 

arr.push(...items) – добавляет элементы в конец,
arr.pop() – извлекает элемент из конца,
arr.shift() – извлекает элемент из начала,
arr.unshift(...items) – добавляет элементы в начало.
arr.splice(0, 2); // удалить 2 первых элемента
arr.slice(1, 3); // (копирует с 1 до 3)
arr.concat(arg1, arg2...)

strings.sort((a, b) => a.localeCompare(b, "ru"));

let primitiveTypes = ['string', 'number', 'null', 'undefined', 'boolean', 'symbol', 'bigint']

DOM или Document Object Model (объектная модель документа) — это объект, основанный на документе 
(странице)
 представляет собой древовидную структуру

Область видимости — это место, где (или откуда) мы имеем доступ к переменным или функциям. 
JS имеем три типа областей видимости: глобальная, функциональная и блочная (ES6).

Замыкание — это способность функции во время создания запоминать ссылки на переменные и параметры, 
находящиеся в текущей области видимости

«use strict» — это директива ES5, которая заставляет код выполняться в строгом режиме. 
Строгий режим вводит некоторые ограничения по написанию кода
Нельзя присваивать значения или обращаться к необъявленным переменным:
Запрещено дублирование параметров:
Нельзя создавать функции с помощью функции eval:
Значением «this» по умолчанию является undefined:


Object.assign()
JSON.parse() и JSON.stringify().
structuredClone()

spread распаковки
rest сбора

(prototype) — это механизм, позволяющий объектам наследовать свойства и методы от других объектов. 
Каждый объект имеет скрытое свойство [[Prototype]], ссылающееся на свой прототип, который, 
в свою очередь, может иметь свой прототип, образуя цепочку прототипов. 

Функциональное программирование — это декларативная концепция программирования или образец (паттерн) того, 
как строятся приложения, как используются функции, содержащие выражения, 
которые вычисляют значения без изменения аргументов, 
 которые им передаются.

 Функции высшего порядка (Higher-Order Functions, HOF) — это функции, 
 которые либо принимают другие функции в качестве аргументов, 
 либо возвращают функции как результат, либо делают и то, и другое


Функции называют объектами первого класса, потому что они обрабатываются также, как и любое другое значение в JS. 
Они могут присваиваться переменным, быть свойством объекта (методом), элементом массива, аргументом другой функции, 
значением, возвращаемым функцией. 
Единственным отличием функции от любого другого значения в JS является то, что функция может быть выполнена или вызвана.

throw "Error2";
throw new Error("Неверно указан номер месяца");

Arguments — это коллекция аргументов, передаваемых функции.

Как создать объект, не имеющий прототипа? - Это можно сделать с помощью Object.create:

ECMAScript — это спецификация, стандарт скриптовых языков программирования, он является основой JS, 
поэтому любые изменения ECMAScript отражаются на JS.

Что нового привнес в JS стандарт ES6 или ECMAScript2015?

Стрелочные функции (Arrow Functions).
Классы (Classes).
Шаблонные строки (Template Strings).
Расширенные объектные литералы (Enhanced Object literals).
Деструктуризация (Object Destructuring).
Промисы (Promises).
Генераторы (Generators).
Модули (Modules).
Symbol.
Прокси (Proxies).
Множества (Sets).
Параметры по умолчанию.
Операторы rest и spread.
Блочная область видимости (ключевые слова «let» и «const»).

59. Как определить наличие свойства в объекте?
console.log('prop' in o) // true  использовании оператора «in»:
console.log(o.hasOwnProperty('prop2')) // true использовать метод hasOwnProperty:
console.log(o['prop']) // bwahahah индексная нотация массива:

61. Как в JS создать объект? 
Объектный литерал: {}
Функция-конструктор: 
Object.create:

В чем разница между оператором «in» и методом hasOwnProperty?
оператор «in» проверяет наличие свойства не только в самом объекте, но и в его прототипах, 
а метод hasOwnProperty — только в объекте.